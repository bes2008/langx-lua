---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fangjinuo.
--- DateTime: 2021/3/5 10:03
---


--[[
    data packet:

|--------------------------------------------------------------
| packet_flag   |heads_length |   heads   |  body_length | body |
|--------------------------------------------------------------

计算长度时，统一按java中的规范来：

packet_flag: 统一为：BSPP，代表了BES Single Port Packet, 4个字符， 8个字节。
heads: 运行放入自定义请求头，最大长度为 4kb ，即 4kb = 2k * char = 2048的字符串长度。内容结构为："key1=value1;key2=value2..."
heads_length: 代表了 heads 的长度，由于heads 最长是 4*1024=4096，所以heads_length 最大值为 4096，所以用一个 integer即可表示。也就是用4个字节即可。
body: 原始数据包
body_length: 原始数据包长度，8个字节

]]--

local portDispatcher = {}

--- create a tcp socket
--- @param host string the remote server, not a load balancer host
--- @param port number the remote port
--- @param connect_timeout number the timeout of connect to remote server, unit: mills, default: 3000
--- @param send_timeout number the timeout of write to remote server, unit: mills, default: 3000
--- @param read_timeout number the timeout of read any byte from remote server, unit: mills, default: 30000
--- @param keepalive number the keepalive timeout, unit: s, default: 60
--- @param pool_size number the socket connection pool size, default :30
--- @return table return a cosocket when connect successful, else nil
function portDispatcher.connect(host, port, connect_timeout, send_timeout, read_timeout, keepalive, pool_size)
    local socket = ngx.socket.tcp()

    assert(host, "the host is null or empty")
    assert((not port == nil) and port > 0 and port < 65535, "the port is illegal: " .. tostring(port))
    if (connect_timeout == nil or connect_timeout < 1) then
        connect_timeout = 3000
    end
    if (send_timeout == nil or send_timeout < 1) then
        send_timeout = 3000
    end
    if (read_timeout == nil or read_timeout < 1) then
        read_timeout = 30000
    end
    if (keepalive == nil or keepalive < 1) then
        keepalive = 60
    end
    if (pool_size == nil or pool_size < 1) then
        pool_size = 30
    end

    local connect_ok, connect_error = socket:connect(connect_timeout, send_timeout, read_timeout)
    if (connect_ok) then
        socket:setkeepalive(keepalive, pool_size)
        return socket
    else
        -- log error
        socket:close()
        return nil
    end
end
