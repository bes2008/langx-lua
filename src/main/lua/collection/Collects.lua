---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fangjinuo.
--- DateTime: 2021/2/26 15:05
---

local Types = require("Types")
local Functions = require("Functions")
local Collects = {}

--- traverse a table
--- @param table table a table
--- @param consumePredicate function a predicate with two arguments: key, value, when it match, will do do with the consumer
--- @param consumer function a consumer with two arguments: key, value
--- @param breakPredicate function a predicate with two arguments: key,value
function Collects.forEach(table, consumePredicate, consumer, breakPredicate)
    if (Types.isNull(table) or Types.isNull(consumer)) then
        return
    end

    if (Types.isNull(consumePredicate)) then
        consumePredicate = Functions.truePredicate
    end

    if (Types.isNull(breakPredicate)) then
        breakPredicate = Functions.falsePredicate;
    end

    for key, value in pairs(table) do
        if (consumePredicate(key, value)) then
            consumer(key, value)
            if (breakPredicate(key, value)) then
                break ;
            end
        end
    end
end

function Collects.filter(table, predicate)
    return Collects.filterN(table, predicate, -1);
end

--- filter a table, find n items
--- @param table table a table
--- @param predicate function the predicate
--- @param n number an integer,  if n < 0, will not length limit, if n = 0 , will not do filter
function Collects.filterN(table, predicate, n)
    if (Types.isNull(table) or Types.isNull(predicate)) then
        return table or {}
    end

    if (Types.isNull(n)) then
        n = -1;
    end
    if (not Types.isNumber(n)) then
        n = -1;
    end

    if (n == 0) then
        return table;
    end

    local newTable = {};
    local consumer = function(key, value)
        newTable[key] = value;
    end

    local breakPredicate = Functions.falsePredicate;
    if (n > 0) then
        breakPredicate = function()
            return rawlen(newTable) >= n
        end
    end
    Collects.forEach(table, predicate, consumer, breakPredicate);
    return newTable;
end

--- do map
--- @param table table a table
--- @param mapper function a mapper function
function Collects.map(table, mapper)
    if (Types.isNull(table) or Types.isNull(mapper)) then
        return table or {}
    end
    local newTable = {}
    local consumer = function(key, value)
        local key1, value1 = mapper(key, value);
        newTable[key1] = value1;
    end
    Collects.forEach(table, Functions.truePredicate, consumer)
    return newTable
end

return Collects;